// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: post.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
    user_id,
    title,
    content
) VALUES (
    $1, $2, $3
) RETURNING id, user_id, created_at, updated_at, deleted_at, title, content
`

type CreatePostParams struct {
	UserID  int64  `json:"user_id"`
	Title   string `json:"title"`
	Content string `json:"content"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost, arg.UserID, arg.Title, arg.Content)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Title,
		&i.Content,
	)
	return i, err
}

const getPostByUserID = `-- name: GetPostByUserID :many
SELECT id, user_id, created_at, updated_at, deleted_at, title, content FROM posts 
WHERE user_id = $1
`

func (q *Queries) GetPostByUserID(ctx context.Context, userID int64) ([]Post, error) {
	rows, err := q.db.Query(ctx, getPostByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Title,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsFullText = `-- name: GetPostsFullText :many
SELECT id, user_id, created_at, updated_at, deleted_at, title, content FROM posts
WHERE (to_tsvector('simple', title) @@ plainto_tsquery('simple', $2::text) OR title = '')
OR (to_tsvector('simple', content) @@ plainto_tsquery('simple', $2::text) OR content = '')
LIMIT COALESCE($3::int, 10) 
OFFSET $1
`

type GetPostsFullTextParams struct {
	Offset     int32       `json:"offset"`
	Keyword    string      `json:"keyword"`
	LimitParam pgtype.Int4 `json:"limit_param"`
}

func (q *Queries) GetPostsFullText(ctx context.Context, arg GetPostsFullTextParams) ([]Post, error) {
	rows, err := q.db.Query(ctx, getPostsFullText, arg.Offset, arg.Keyword, arg.LimitParam)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Title,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
