// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
    user_id,
    title,
    content
) VALUES (
    $1, $2, $3
) RETURNING id, user_id, created_at, updated_at, deleted_at, title, content
`

type CreatePostParams struct {
	UserID  int64  `json:"user_id"`
	Title   string `json:"title"`
	Content string `json:"content"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost, arg.UserID, arg.Title, arg.Content)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Title,
		&i.Content,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email,
    username,
    password_hash,
    role,
    origin
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, created_at, updated_at, deleted_at, email, username, password_hash, role, first_name, last_name, picture_url, refresh_token, origin
`

type CreateUserParams struct {
	Email        string      `json:"email"`
	Username     pgtype.Text `json:"username"`
	PasswordHash []byte      `json:"password_hash"`
	Role         Roles       `json:"role"`
	Origin       Origins     `json:"origin"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Username,
		arg.PasswordHash,
		arg.Role,
		arg.Origin,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.PictureUrl,
		&i.RefreshToken,
		&i.Origin,
	)
	return i, err
}

const createUserGoogle = `-- name: CreateUserGoogle :one
INSERT INTO users (
    email,
    first_name,
    last_name,
    picture_url,
    refresh_token,
    role,
    origin
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, created_at, updated_at, deleted_at, email, username, password_hash, role, first_name, last_name, picture_url, refresh_token, origin
`

type CreateUserGoogleParams struct {
	Email        string      `json:"email"`
	FirstName    pgtype.Text `json:"first_name"`
	LastName     pgtype.Text `json:"last_name"`
	PictureUrl   pgtype.Text `json:"picture_url"`
	RefreshToken pgtype.Text `json:"refresh_token"`
	Role         Roles       `json:"role"`
	Origin       Origins     `json:"origin"`
}

func (q *Queries) CreateUserGoogle(ctx context.Context, arg CreateUserGoogleParams) (User, error) {
	row := q.db.QueryRow(ctx, createUserGoogle,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.PictureUrl,
		arg.RefreshToken,
		arg.Role,
		arg.Origin,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.PictureUrl,
		&i.RefreshToken,
		&i.Origin,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET deleted_at = now()
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getPostByUserID = `-- name: GetPostByUserID :many
SELECT id, user_id, created_at, updated_at, deleted_at, title, content FROM posts 
WHERE user_id = $1
`

func (q *Queries) GetPostByUserID(ctx context.Context, userID int64) ([]Post, error) {
	rows, err := q.db.Query(ctx, getPostByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Title,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsFullText = `-- name: GetPostsFullText :many
SELECT id, user_id, created_at, updated_at, deleted_at, title, content FROM posts
WHERE (to_tsvector('simple', title) @@ plainto_tsquery('simple', $1::text) OR $1::text = '')
AND (to_tsvector('simple', content) @@ plainto_tsquery('simple', $2::text) OR $2::text = '')
`

type GetPostsFullTextParams struct {
	Title   string `json:"title"`
	Content string `json:"content"`
}

func (q *Queries) GetPostsFullText(ctx context.Context, arg GetPostsFullTextParams) ([]Post, error) {
	rows, err := q.db.Query(ctx, getPostsFullText, arg.Title, arg.Content)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Title,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at, deleted_at, email, username, password_hash, role, first_name, last_name, picture_url, refresh_token, origin FROM users 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.PictureUrl,
		&i.RefreshToken,
		&i.Origin,
	)
	return i, err
}

const getUserForUpdate = `-- name: GetUserForUpdate :one
SELECT id, created_at, updated_at, deleted_at, email, username, password_hash, role, first_name, last_name, picture_url, refresh_token, origin FROM users 
WHERE id = $1 LIMIT 1 
FOR UPDATE
`

func (q *Queries) GetUserForUpdate(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserForUpdate, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.PictureUrl,
		&i.RefreshToken,
		&i.Origin,
	)
	return i, err
}

const getUsersByRole = `-- name: GetUsersByRole :many
SELECT id, created_at, updated_at, deleted_at, email, username, password_hash, role, first_name, last_name, picture_url, refresh_token, origin FROM users
WHERE role = $1 AND deleted_at IS NULL
ORDER BY id DESC
LIMIT COALESCE($3::int, 10) 
OFFSET $2
`

type GetUsersByRoleParams struct {
	Role       Roles       `json:"role"`
	Offset     int32       `json:"offset"`
	LimitParam pgtype.Int4 `json:"limit_param"`
}

func (q *Queries) GetUsersByRole(ctx context.Context, arg GetUsersByRoleParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersByRole, arg.Role, arg.Offset, arg.LimitParam)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Email,
			&i.Username,
			&i.PasswordHash,
			&i.Role,
			&i.FirstName,
			&i.LastName,
			&i.PictureUrl,
			&i.RefreshToken,
			&i.Origin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersLikeUsername = `-- name: GetUsersLikeUsername :many
SELECT id, created_at, updated_at, deleted_at, email, username, password_hash, role, first_name, last_name, picture_url, refresh_token, origin FROM users
WHERE username ILIKE $1
ORDER BY id DESC
LIMIT COALESCE($3::int, 10) 
OFFSET $2
`

type GetUsersLikeUsernameParams struct {
	Username   pgtype.Text `json:"username"`
	Offset     int32       `json:"offset"`
	LimitParam pgtype.Int4 `json:"limit_param"`
}

func (q *Queries) GetUsersLikeUsername(ctx context.Context, arg GetUsersLikeUsernameParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersLikeUsername, arg.Username, arg.Offset, arg.LimitParam)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Email,
			&i.Username,
			&i.PasswordHash,
			&i.Role,
			&i.FirstName,
			&i.LastName,
			&i.PictureUrl,
			&i.RefreshToken,
			&i.Origin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getuserByEmail = `-- name: GetuserByEmail :one
SELECT id, created_at, updated_at, deleted_at, email, username, password_hash, role, first_name, last_name, picture_url, refresh_token, origin FROM users 
WHERE (email = $1 OR $1 = '')
AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetuserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getuserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.PictureUrl,
		&i.RefreshToken,
		&i.Origin,
	)
	return i, err
}

const getuserByEmailOrUsername = `-- name: GetuserByEmailOrUsername :one
SELECT id, created_at, updated_at, deleted_at, email, username, password_hash, role, first_name, last_name, picture_url, refresh_token, origin FROM users 
WHERE (email = $1 OR $1 = '')
AND (username = $2 OR $2 = '')
AND deleted_at IS NULL
LIMIT 1
`

type GetuserByEmailOrUsernameParams struct {
	Email    string      `json:"email"`
	Username pgtype.Text `json:"username"`
}

func (q *Queries) GetuserByEmailOrUsername(ctx context.Context, arg GetuserByEmailOrUsernameParams) (User, error) {
	row := q.db.QueryRow(ctx, getuserByEmailOrUsername, arg.Email, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.PictureUrl,
		&i.RefreshToken,
		&i.Origin,
	)
	return i, err
}

const updateUserEmail = `-- name: UpdateUserEmail :one
UPDATE users
SET email = $1, updated_at = NOW()
WHERE id = $2 AND deleted_at IS NULL
RETURNING id, created_at, updated_at, deleted_at, email, username, password_hash, role, first_name, last_name, picture_url, refresh_token, origin
`

type UpdateUserEmailParams struct {
	Email string `json:"email"`
	ID    int64  `json:"id"`
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserEmail, arg.Email, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.PictureUrl,
		&i.RefreshToken,
		&i.Origin,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE users
SET password_hash = $1, updated_at = NOW()
WHERE id = $2 AND deleted_at IS NULL
RETURNING id, created_at, updated_at, deleted_at, email, username, password_hash, role, first_name, last_name, picture_url, refresh_token, origin
`

type UpdateUserPasswordParams struct {
	PasswordHash []byte `json:"password_hash"`
	ID           int64  `json:"id"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserPassword, arg.PasswordHash, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.PictureUrl,
		&i.RefreshToken,
		&i.Origin,
	)
	return i, err
}

const updateUserRole = `-- name: UpdateUserRole :one
UPDATE users
SET role = $1, updated_at = NOW()
WHERE id = $2 AND deleted_at IS NULL
RETURNING id, created_at, updated_at, deleted_at, email, username, password_hash, role, first_name, last_name, picture_url, refresh_token, origin
`

type UpdateUserRoleParams struct {
	Role Roles `json:"role"`
	ID   int64 `json:"id"`
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserRole, arg.Role, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.PictureUrl,
		&i.RefreshToken,
		&i.Origin,
	)
	return i, err
}

const updateUserUsername = `-- name: UpdateUserUsername :one
UPDATE users
SET username = $1, updated_at = NOW()
WHERE id = $2 AND deleted_at IS NULL
RETURNING id, created_at, updated_at, deleted_at, email, username, password_hash, role, first_name, last_name, picture_url, refresh_token, origin
`

type UpdateUserUsernameParams struct {
	Username pgtype.Text `json:"username"`
	ID       int64       `json:"id"`
}

func (q *Queries) UpdateUserUsername(ctx context.Context, arg UpdateUserUsernameParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserUsername, arg.Username, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.PictureUrl,
		&i.RefreshToken,
		&i.Origin,
	)
	return i, err
}
